openapi: 3.0.0
info:
  title: BOGOWI Blockchain API
  description: High-performance Go API for BOGOWI blockchain operations including tokens, NFTs, rewards, and DAO functionality
  version: 1.0.0
  contact:
    name: BOGOWI Team
    url: https://bogowi.com
servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://web3.bogowi.com/api
    description: Production server

paths:
  /health:
    get:
      summary: Health Check
      description: Returns API status and configured smart contract addresses
      tags: [System]
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  contracts:
                    type: object
                    properties:
                      bogo_token_v2:
                        type: string
                        example: "0x9353A4c0A06a4956DEd9EcE66B0FFd740861844E"

  /gas-price:
    get:
      summary: Get Gas Price
      description: Returns the current network gas price in Gwei
      tags: [System]
      responses:
        '200':
          description: Current gas price
          content:
            application/json:
              schema:
                type: object
                properties:
                  gasPrice:
                    type: string
                    example: "200.00 gwei"

  /token/balance/{address}:
    get:
      summary: Get Token Balance
      description: Returns the BOGO token balance for a specific address
      tags: [Tokens]
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            example: "0x742b18C3E6C2E0dD5f75FbBd7D71d8CaE59c7054"
      responses:
        '200':
          description: Token balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                  balance:
                    type: string
                    example: "1000.5"
        '400':
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /token/transfer:
    post:
      summary: Transfer BOGO Tokens
      description: Transfer BOGO tokens to another address
      tags: [Tokens]
      parameters:
        - name: network
          in: query
          description: Network to use (testnet or mainnet)
          schema:
            type: string
            enum: [testnet, mainnet]
            default: mainnet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [to, amount]
              properties:
                to:
                  type: string
                  description: Recipient address
                  example: "0x742b18C3E6C2E0dD5f75FbBd7D71d8CaE59c7054"
                amount:
                  type: string
                  description: Amount to transfer (in BOGO)
                  example: "100"
      responses:
        '200':
          description: Transfer successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  transaction:
                    type: string
                  to:
                    type: string
                  amount:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /rewards/templates:
    get:
      summary: Get Reward Templates
      description: Returns available reward templates
      tags: [Rewards]
      responses:
        '200':
          description: List of reward templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      type: object

  /rewards/templates/{id}:
    get:
      summary: Get Reward Template
      description: Returns a specific reward template
      tags: [Rewards]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reward template details
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Template not found

  /rewards/eligibility:
    get:
      summary: Check Reward Eligibility
      description: Check if authenticated user is eligible for rewards
      tags: [Rewards]
      security:
        - firebase: []
      responses:
        '200':
          description: Eligibility status
          content:
            application/json:
              schema:
                type: object

  /rewards/history:
    get:
      summary: Get Reward History
      description: Returns reward history for authenticated user
      tags: [Rewards]
      security:
        - firebase: []
      responses:
        '200':
          description: User's reward history
          content:
            application/json:
              schema:
                type: object

  /rewards/claim-v2:
    post:
      summary: Claim Reward V2
      description: Claim rewards for authenticated user
      tags: [Rewards]
      security:
        - firebase: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rewardType]
              properties:
                rewardType:
                  type: string
                amount:
                  type: string
      responses:
        '200':
          description: Reward claimed successfully

  /rewards/claim-referral:
    post:
      summary: Claim Referral Reward
      description: Claim referral rewards
      tags: [Rewards]
      security:
        - firebase: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [referralCode]
              properties:
                referralCode:
                  type: string
      responses:
        '200':
          description: Referral reward claimed

  /rewards/claim-custom:
    post:
      summary: Claim Custom Reward
      description: Backend-only endpoint to claim custom rewards
      tags: [Rewards]
      parameters:
        - name: X-Backend-Auth
          in: header
          required: true
          schema:
            type: string
          description: Backend authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [recipientAddress, amount, rewardType]
              properties:
                recipientAddress:
                  type: string
                amount:
                  type: string
                rewardType:
                  type: string
      responses:
        '200':
          description: Custom reward processed
        '401':
          description: Unauthorized


components:
  securitySchemes:
    firebase:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Firebase Authentication token
  
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message

tags:
  - name: System
    description: System health and utility endpoints
  - name: Tokens
    description: BOGO token operations
  - name: Rewards
    description: User rewards and achievements
