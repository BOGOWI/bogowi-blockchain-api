name: Deploy Go API to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  GO_VERSION: "1.23"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run vet
      run: go vet ./...
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build for Linux
      env:
        CGO_ENABLED: 0
        GOOS: linux
        GOARCH: amd64
      run: |
        go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o bogowi-api-linux .
        chmod +x bogowi-api-linux
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: bogowi-api-linux
        path: bogowi-api-linux
        retention-days: 1

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download binary artifact
      uses: actions/download-artifact@v4
      with:
        name: bogowi-api-linux
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install AWS CLI
      run: |
        if ! command -v aws &> /dev/null; then
          echo "Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        else
          echo "AWS CLI already installed: $(aws --version)"
        fi
    
    - name: Debug Connection
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      run: |
        echo "Testing connection to EC2_HOST..."
        echo "Host value (masked): ${EC2_HOST:0:5}...${EC2_HOST: -5}"
        echo "Instance ID: $EC2_INSTANCE_ID"
        
        # If EC2_HOST is empty, try to get it from instance ID
        if [ -z "$EC2_HOST" ] && [ ! -z "$EC2_INSTANCE_ID" ]; then
          echo "EC2_HOST not set, fetching from instance ID..."
          EC2_HOST=$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region ${{ env.AWS_REGION }} --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
          echo "Resolved EC2_HOST: ${EC2_HOST:0:5}...${EC2_HOST: -5}"
        fi
        
        # Test DNS resolution
        echo "Testing DNS resolution..."
        nslookup $EC2_HOST || echo "DNS lookup failed"
        
        # Test connectivity
        echo "Testing SSH connectivity..."
        timeout 10 nc -zv $EC2_HOST 22 2>&1 || echo "Port 22 connection test failed"
    
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        EC2_KEY: ${{ secrets.EC2_KEY }}
      run: |
        # Resolve EC2_HOST if not set
        if [ -z "$EC2_HOST" ] && [ ! -z "$EC2_INSTANCE_ID" ]; then
          echo "Resolving EC2_HOST from instance ID..."
          EC2_HOST=$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region ${{ env.AWS_REGION }} --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
          echo "Using EC2_HOST: $EC2_HOST"
        fi
        
        # Validate EC2_HOST
        if [ -z "$EC2_HOST" ] || [ "$EC2_HOST" = "None" ]; then
          echo "ERROR: Could not determine EC2_HOST"
          exit 1
        fi
        
        # Create SSH key file
        echo "$EC2_KEY" > ec2_key.pem
        chmod 600 ec2_key.pem
        
        # Test SSH connection first
        echo "Testing SSH connection..."
        ssh -o StrictHostKeyChecking=no \
            -o ConnectTimeout=10 \
            -i ec2_key.pem $EC2_USERNAME@$EC2_HOST \
            "echo 'SSH connection successful'" || {
          echo "SSH connection failed. Checking instance status..."
          aws ec2 describe-instance-status --instance-ids $EC2_INSTANCE_ID --region ${{ env.AWS_REGION }}
          exit 1
        }
        
        # Make binary executable
        chmod +x bogowi-api-linux
        
        # Create deployment script
        cat > deploy.sh << 'SCRIPT'
        #!/bin/bash
        set -e
        
        echo "=== Starting BOGOWI Go API Deployment ==="
        echo "Timestamp: $(date)"
        
        # Navigate to home directory
        cd /home/ec2-user
        
        # Stop existing process (kill only ec2-user's bogowi-api-linux process)
        echo "Stopping existing Go API process..."
        pkill -u ec2-user -f "bogowi-api-linux" || echo "No existing process found"
        
        # Wait for process to stop
        sleep 2
        
        # Backup current binary if exists
        if [ -f "bogowi-api-linux" ]; then
          echo "Backing up current binary..."
          mv bogowi-api-linux bogowi-api-linux.backup.$(date +%Y%m%d_%H%M%S) || true
        fi
        
        # Move new binary from /tmp/ to home directory
        echo "Moving new binary from /tmp/..."
        if [ -f "/tmp/bogowi-api-linux" ]; then
          mv /tmp/bogowi-api-linux /home/ec2-user/bogowi-api-linux
          chown ec2-user:ec2-user /home/ec2-user/bogowi-api-linux
          chmod +x /home/ec2-user/bogowi-api-linux
          echo "Binary moved and permissions set"
        else
          echo "ERROR: Binary not found in /tmp/"
          exit 1
        fi
        
        # Start the API process
        echo "Starting Go API process..."
        cd /home/ec2-user
        nohup ./bogowi-api-linux > api.log 2>&1 &
        
        # Wait for API to be ready (up to 3 minutes)
        echo "Waiting for API to be ready..."
        max_attempts=45
        for i in $(seq 1 $max_attempts); do
          if curl -f -m 5 http://localhost:3001/api/health &>/dev/null; then
            echo "API is ready after $((i * 4)) seconds!"
            break
          fi
          echo "Waiting for API... ($i/$max_attempts)"
          # Check if process is still running
          if ! pgrep -u ec2-user -f "bogowi-api-linux" > /dev/null; then
            echo "ERROR: API process died during startup"
            echo "Last 50 lines of api.log:"
            tail -50 api.log
            exit 1
          fi
          sleep 4
        done
        
        # Check if process is running
        if pgrep -u ec2-user -f "bogowi-api-linux" > /dev/null; then
          echo "=== Deployment successful! ==="
          echo "API process is running with PID: $(pgrep -u ec2-user -f bogowi-api-linux)"
        else
          echo "=== Deployment failed - Process not running ==="
          echo "Checking logs:"
          tail -20 api.log
          exit 1
        fi
        
        # Final health check
        if curl -f http://localhost:3001/api/health; then
          echo "✅ Health check passed!"
        else
          echo "❌ Health check failed!"
          exit 1
        fi
        SCRIPT
        
        # Copy binary first, then deployment script
        echo "Copying binary to EC2..."
        scp -o StrictHostKeyChecking=no \
            -o ServerAliveInterval=30 \
            -o ServerAliveCountMax=120 \
            -o ConnectTimeout=300 \
            -i ec2_key.pem bogowi-api-linux $EC2_USERNAME@$EC2_HOST:/tmp/
        
        echo "Copying deployment script to EC2..."
        scp -o StrictHostKeyChecking=no \
            -o ServerAliveInterval=30 \
            -o ServerAliveCountMax=120 \
            -o ConnectTimeout=300 \
            -i ec2_key.pem deploy.sh $EC2_USERNAME@$EC2_HOST:/tmp/
        
        # Execute deployment script
        echo "Executing deployment script..."
        ssh -o StrictHostKeyChecking=no \
            -o ServerAliveInterval=30 \
            -o ServerAliveCountMax=120 \
            -o ConnectTimeout=300 \
            -o TCPKeepAlive=yes \
            -i ec2_key.pem $EC2_USERNAME@$EC2_HOST \
            'bash /tmp/deploy.sh 2>&1 | tee /tmp/deploy.log'
        
        # Cleanup
        rm -f ec2_key.pem deploy.sh
    
    - name: Verify Deployment
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      run: |
        # Resolve EC2_HOST if not set
        if [ -z "$EC2_HOST" ] && [ ! -z "$EC2_INSTANCE_ID" ]; then
          EC2_HOST=$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region ${{ env.AWS_REGION }} --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
        fi
        
        # Wait a bit more for the service to stabilize
        sleep 10
        
        # Check if the API is accessible via domain
        max_attempts=5
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Checking API health via domain (attempt $attempt/$max_attempts)..."
          if curl -k -f -m 10 https://web3.bogowi.com/api/health; then
            echo "✅ API is running successfully via domain!"
            exit 0
          fi
          echo "API not ready yet via domain, trying direct connection..."
          
          # Try direct connection to EC2 instance
          if curl -f -m 10 http://$EC2_HOST:3001/api/health; then
            echo "✅ API is running successfully on EC2!"
            echo "Note: Domain might need DNS propagation time"
            exit 0
          fi
          
          echo "API not ready yet, waiting..."
          sleep 10
          attempt=$((attempt + 1))
        done
        
        echo "❌ API health check failed after $max_attempts attempts"
        exit 1
