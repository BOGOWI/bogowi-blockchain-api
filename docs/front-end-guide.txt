BOGOWI FRONTEND API GUIDE
========================

BASE URL: https://web3.bogowi.com/api

AUTHENTICATION:
- Public endpoints: No auth required
- Protected endpoints: Bearer token from Firebase/Web3Auth
  Header: Authorization: Bearer <JWT_TOKEN>

==================================================
PUBLIC ENDPOINTS (NO AUTH REQUIRED)
==================================================

1. GET /health
   Response:
   {
     "status": "ok",
     "contracts": {
       "bogo_token_v2": "0xD394c8fEe6dC8b25DD423AE2f6e68191BD379c0C",
       "conservation_nft": "0xe0AB113413dEBe1CD31C8e30dE2e71FA19c03D84",
       "commercial_nft": "0x2cd0f7AE54dAE2D072b0055019257FDfC11AF389",
       "reward_distributor": "0x95C5Be6Ed592C663fF2953C683dBc5E2C257eA9f",
       "multisig_treasury": "0x343586BB0FD2F39406cFBa65c654305Cd9c3525A"
     }
   }

2. GET /gas-price
   Response:
   {
     "gasPrice": "225000000000"  // In wei
   }

3. GET /token/balance/:address
   Params:
   - address: Ethereum address (0x...)
   Response:
   {
     "address": "0xB34A822F735CDE477cbB39a06118267D00948ef7",
     "balance": "864000"  // In BOGO tokens (NOT wei)
   }

4. GET /nft/balance/:address/:tokenId
   Params:
   - address: Ethereum address
   - tokenId: NFT token ID (number as string)
   Response:
   {
     "address": "0x...",
     "tokenId": "1",
     "balance": "1"  // Number of NFTs
   }

5. GET /rewards/info/:address
   Params:
   - address: Ethereum address
   Response: (varies based on SDK implementation)

6. GET /rewards/achievement/:address/:achievementId
   Params:
   - address: Ethereum address
   - achievementId: Achievement ID (string)
   Response: (varies based on SDK implementation)

7. GET /rewards/templates
   Response:
   {
     "templates": [
       {"id": "welcome_bonus", "fixedAmount": "10", "maxClaimsPerWallet": 1, "active": true},
       {"id": "founder_bonus", "fixedAmount": "100", "maxClaimsPerWallet": 1, "requiresWhitelist": true, "active": true},
       {"id": "referral_bonus", "fixedAmount": "20", "active": true},
       {"id": "first_nft_mint", "fixedAmount": "25", "maxClaimsPerWallet": 1, "active": true},
       {"id": "dao_participation", "fixedAmount": "15", "cooldownPeriod": 2592000, "active": true},
       {"id": "attraction_tier_1", "fixedAmount": "10", "active": true},
       {"id": "attraction_tier_2", "fixedAmount": "20", "active": true},
       {"id": "attraction_tier_3", "fixedAmount": "40", "active": true},
       {"id": "attraction_tier_4", "fixedAmount": "50", "active": true},
       {"id": "custom_reward", "maxAmount": "1000", "active": true}
     ]
   }

8. GET /rewards/templates/:id
   Params:
   - id: Template ID (e.g., "welcome_bonus")
   Response:
   {
     "id": "welcome_bonus",
     "fixedAmount": "10",
     "maxClaimsPerWallet": 1,
     "active": true
   }
   Error (404):
   {
     "error": "Template not found"
   }

9. GET /dao/info
   Response:
   {
     "threshold": 2,
     "signerCount": 5,
     "transactionCount": 0
   }

10. GET /dao/pending-transactions
    Response:
    {
      "transactions": []
    }

==================================================
AUTHENTICATED ENDPOINTS (JWT REQUIRED)
==================================================

11. GET /rewards/eligibility
    Query params (optional):
    - templateId: Check specific template (if omitted, checks all)
    Response:
    {
      "eligibilities": [
        {
          "templateId": "welcome_bonus",
          "eligible": true,
          "reason": ""
        },
        {
          "templateId": "founder_bonus",
          "eligible": false,
          "reason": "Not whitelisted"
        }
      ]
    }

12. GET /rewards/history
    Response:
    {
      "wallet": "0x...",
      "claims": [],
      "message": "Claim history not yet implemented"
    }

13. POST /rewards/claim-v2
    Body:
    {
      "templateId": "welcome_bonus"
    }
    Success Response:
    {
      "success": true,
      "txHash": "0x...",
      "message": "Successfully claimed welcome_bonus"
    }
    Error Response:
    {
      "error": "Already claimed"
    }

14. POST /rewards/claim-referral
    Body:
    {
      "referrerAddress": "0x..."
    }
    Success Response:
    {
      "success": true,
      "txHash": "0x...",
      "message": "Referral bonus claimed successfully"
    }
    Error Response:
    {
      "error": "Already referred"
    }

==================================================
ERROR RESPONSES
==================================================

All endpoints may return these error formats:

400 Bad Request:
{
  "error": "Invalid Ethereum address"
}

401 Unauthorized:
{
  "error": "Unauthorized"
}

404 Not Found:
{
  "error": "Template not found"
}

500 Internal Server Error:
{
  "error": "Internal server error"
}

==================================================
NOTES FOR FRONTEND DEVELOPERS
==================================================

1. All amounts are in BOGO tokens (not wei) unless specified
2. Ethereum addresses must be valid checksummed addresses
3. JWT tokens come from Firebase/Web3Auth authentication
4. The wallet address is extracted from the JWT token for authenticated endpoints
5. Do NOT call these endpoints from frontend:
   - POST /token/transfer (backend only)
   - POST /nft/mint-ticket (backend only)
   - POST /nft/mint-collectible (backend only)
   - POST /rewards/claim (legacy, backend only)
   - POST /rewards/claim-custom (backend only)